<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>主键约束、拆分表、事务、数据类型</title>
      <link href="/2019/06/01/%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F%E3%80%81%E6%8B%86%E5%88%86%E8%A1%A8%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/06/01/%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F%E3%80%81%E6%8B%86%E5%88%86%E8%A1%A8%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束 primary key"></a>主键约束 primary key</h3><h4 id="主键：用于表示数据唯一性的字段称为主键"><a href="#主键：用于表示数据唯一性的字段称为主键" class="headerlink" title="主键：用于表示数据唯一性的字段称为主键"></a>主键：用于表示数据唯一性的字段称为主键</h4><h4 id="约束：-是给表字段添加的限制条件"><a href="#约束：-是给表字段添加的限制条件" class="headerlink" title="约束： 是给表字段添加的限制条件"></a>约束： 是给表字段添加的限制条件</h4><h4 id="主键约束：限制主键字段值不能重复并且非空-唯一且非空"><a href="#主键约束：限制主键字段值不能重复并且非空-唯一且非空" class="headerlink" title="主键约束：限制主键字段值不能重复并且非空 (唯一且非空)"></a>主键约束：限制主键字段值不能重复并且非空 (唯一且非空)</h4><pre><code>create table t1(id int primary key,name varchar(10));  insert into t1 values(1,&apos;Tom&apos;);  insert into t1 values(1,&apos;Jerry&apos;);//失败 重复  insert into t1 values(null,&apos;ABC&apos;);//失败 不能为null  </code></pre><h4 id="自增：-auto-increment"><a href="#自增：-auto-increment" class="headerlink" title="自增： auto_increment"></a>自增： auto_increment</h4><pre><code>create table t2(id int primary key auto_increment,name varchar(10));  insert into t2 values(null,&apos;AAA&apos;);  insert into t2 values(2,&apos;AAA&apos;);  insert into t2 values(10,&apos;mm&apos;);  insert into t2 values(null,&apos;AAA&apos;);  1. 当字段值为null的时候值会自己增长2. 自增字段值也可以手动赋值3. 增长规则：从曾经出现的最大值基础上+14. 自增数值只增不减 (delete清空表 自增数值并不清零)</code></pre><h3 id="注释-comment"><a href="#注释-comment" class="headerlink" title="注释 comment"></a>注释 comment</h3><h4 id="创建表声明字段的时候给字段添加的介绍"><a href="#创建表声明字段的时候给字段添加的介绍" class="headerlink" title="创建表声明字段的时候给字段添加的介绍"></a>创建表声明字段的时候给字段添加的介绍</h4><pre><code>create table t3(id int primary key auto_increment comment &apos;这是一个主键&apos;,name varchar(10) comment &apos;这是员工的姓名&apos;);</code></pre><h3 id="和-‘"><a href="#和-‘" class="headerlink" title="` 和 ‘"></a>` 和 ‘</h3><h4 id="用于修饰表名和字段名-可以省略"><a href="#用于修饰表名和字段名-可以省略" class="headerlink" title="`: 用于修饰表名和字段名 可以省略"></a>`: 用于修饰表名和字段名 可以省略</h4><pre><code>create table `t4`(`id` int,`name` varchar(10));</code></pre><h4 id="‘-用于修饰字符串"><a href="#‘-用于修饰字符串" class="headerlink" title="‘ :用于修饰字符串"></a>‘ :用于修饰字符串</h4><h3 id="数据冗余"><a href="#数据冗余" class="headerlink" title="数据冗余"></a>数据冗余</h3><p>如果表设计不够合理，保存大量数据的同时可能随之会出现大量重复数据，这些重复数据的现象就称为数据冗余，通过拆分表的形式解决冗余问题</p><h3 id="练习：设计表保存以下数据："><a href="#练习：设计表保存以下数据：" class="headerlink" title="练习：设计表保存以下数据："></a>练习：设计表保存以下数据：</h3><p>设计表保存以下数据：   </p><ol><li>保存男装分类(category)下西服分类下的商品皮尔卡丹西服，价格9800，库存98件  </li><li>保存家用电器分类下，电视机分类下的小米电视，价格2500，库存108件  </li></ol><ul><li>创建商品表<br>  create table item(id int primary key auto_increment, name varchar(10),price int,num int,categoryid int);  </li><li>创建分类表<br>  create table category(id int primary key auto_increment,name varchar(10),parentid int);  </li><li>插入数据<br>  insert into category values(null,’男装’,null),(null,’西服’,1),(null,’家电’,null),(null,’电视机’,3);<br>  insert into item values(null,’皮尔卡丹’,9800,98,2),(null,’小米电视’,2500,108,4);  <h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h4>事务是数据库中执行SQL语句的最小工作单元，可以保证事务内的多条SQL语句要么全部成功，要么全部失败。  <h5 id="查看数据库自动提交的状态"><a href="#查看数据库自动提交的状态" class="headerlink" title="查看数据库自动提交的状态"></a>查看数据库自动提交的状态</h5>  show variables like ‘%autocommit%’;  <h5 id="关掉自动提交-0关闭-1开启"><a href="#关掉自动提交-0关闭-1开启" class="headerlink" title="关掉自动提交 0关闭  1开启"></a>关掉自动提交 0关闭  1开启</h5>  set autocommit=0;  <h5 id="测试转账："><a href="#测试转账：" class="headerlink" title="测试转账："></a>测试转账：</h5>  create table person(id int, name varchar(10),money int);<br>  insert into person values(1,’超人’,500),(2,’钢铁侠’,10000);  <h5 id="关掉自动提交：-set-autocommit-0"><a href="#关掉自动提交：-set-autocommit-0" class="headerlink" title="关掉自动提交： set autocommit=0;"></a>关掉自动提交： set autocommit=0;</h5><ol><li>先让超人+2000<br> update person set money=2500 where id=1;    </li><li>开启另一个终端 验证 此时数据库文件中的数据并没改掉   </li><li>让钢铁侠-2000<br> update person set money=8000 where id=2;  </li><li>执行提交<br> commit;</li></ol></li></ul><h5 id="回滚-rollback"><a href="#回滚-rollback" class="headerlink" title="回滚 rollback;"></a>回滚 rollback;</h5><h5 id="将内存中的修改回滚到上次提交（commit）的点"><a href="#将内存中的修改回滚到上次提交（commit）的点" class="headerlink" title="将内存中的修改回滚到上次提交（commit）的点"></a>将内存中的修改回滚到上次提交（commit）的点</h5><pre><code>update person set money=100 where id=1;rollback;</code></pre><h5 id="保存回滚点-savepoint"><a href="#保存回滚点-savepoint" class="headerlink" title="保存回滚点 savepoint"></a>保存回滚点 savepoint</h5><pre><code>update person set money=100 where id=1;  savepoint s1;  update person set money=200 where id=1;  savepoint s2;   rollback to s1;  </code></pre><h3 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h3><h4 id="DDL-Data-Definition-Language"><a href="#DDL-Data-Definition-Language" class="headerlink" title="DDL Data Definition Language"></a>DDL Data Definition Language</h4><ul><li>数据定义语言，包括 create,alter,drop,truncate ,不支持事务<h4 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML Data Manipulation Language"></a>DML Data Manipulation Language</h4></li><li>数据操作语言， 包括 insert,delete,update,select(DQL),支持事务<h4 id="DQL-Data-Query-Language"><a href="#DQL-Data-Query-Language" class="headerlink" title="DQL Data Query Language"></a>DQL Data Query Language</h4></li><li>数据查询语言，只包括select，和事务没有关系因为并没有修改数据<h4 id="TCL-Transaction-Control-Language"><a href="#TCL-Transaction-Control-Language" class="headerlink" title="TCL Transaction Control Language"></a>TCL Transaction Control Language</h4></li><li>事务控制语言，包括 commit,rollback, savepoint,rollback to<h4 id="DCL-Data-Control-Language"><a href="#DCL-Data-Control-Language" class="headerlink" title="DCL Data Control Language"></a>DCL Data Control Language</h4></li><li>数据控制语言，用于处理分配用户权限相关的操作</li></ul><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><ul><li>truncate table 表名;</li><li>删除表并且创建一个新表</li><li>truncate、drop和delete的区别：</li><li>delete用于删除数据，使用delete清空表时自增数值不清零 执行效率最低</li><li>drop 用于删除表 执行效率最高</li><li>truncate 用于删除表并创建新的空表，执行效率比delete要高，而且自增数值会清零</li></ul><h3 id="数据库的数据类型"><a href="#数据库的数据类型" class="headerlink" title="数据库的数据类型"></a>数据库的数据类型</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><ul><li>常用整数有 int(m)和bigint(m)，m代表显示长度必须和zerofill结合使用<br>  create table t_int(num int(10) zerofill);<br>  insert into t_int values(123);<br>  select * from t_int;  <h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4></li><li>常用浮点数double(m,d) m代表总长度 d代表小数长度   23.346 m=5 d=3 </li><li>decimal超高精度浮点数，应用场景：涉及超高精度运算时使用<br>  create table t_double(num double(5,3));<br>  insert into t_double values(23.5678); 值为23.568<br>  insert into t_double values(23.5); 值为23.500  <h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4></li><li>char(m): 固定长度  m=10 abc 占10，效率高，最大255</li><li>varchar(m):可变长度 m=10 abc 占3，节省空间，最大65535，如果超过255建议使用text</li><li>text(m):可变长度 最大65535<h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4></li><li>date:只能保存年月日</li><li>time:只能保存时分秒</li><li>datetime:保存年月日时分秒，默认值为null，最大值9999-12-31</li><li>timestamp(时间戳距离19700101 08：00：00):保存年月日时分秒，默认值为当前系统时间,最大值2038-01-19<br>  create table t_time(t1 date,t2 time,t3 datetime,t4 timestamp);<br>  insert into t_time values(‘2018-10-16’,null,null,null);<br>  insert into t_time values (null,’20:06:32’,’2008-11-22 18:22:11’,null);  </li></ul><h3 id="配置URL："><a href="#配置URL：" class="headerlink" title="配置URL："></a>配置URL：</h3><p>jdbc:mysql://localhost:3306/db2?useUnicode=true&amp;characterEncoding=UTF-8</p><h3 id="三方SQL工具：sqlyog"><a href="#三方SQL工具：sqlyog" class="headerlink" title="三方SQL工具：sqlyog"></a>三方SQL工具：sqlyog</h3>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库介绍 SQL基础</title>
      <link href="/2019/06/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D-SQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D-SQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>之前通过流去操作文件保存数据的弊端：</p><ol><li>执行效率低</li><li>开发成本高</li><li>一般只能保存小量数据</li><li>只能保存文本数据<a id="more"></a><h4 id="什么是DB"><a href="#什么是DB" class="headerlink" title="什么是DB"></a>什么是DB</h4></li></ol><ul><li>DataBase 数据库： 代表文件集合<h4 id="什么是DBMS"><a href="#什么是DBMS" class="headerlink" title="什么是DBMS"></a>什么是DBMS</h4></li><li>DataBaseManagementSystem 数据库管理系统(软件) ，用于管理保存数据的文件集合，用于和程序员进行交互，常见的DBMS有：Oracle MySQL DB2 SQLServer Sqlite ，DBMS具备网络访问能力</li></ul><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><ul><li>Structured Query Language：结构化查询语言，用户程序员和DBMS进行交互，用于程序员告诉DBMS到底对数据进行什么操作的</li></ul><h3 id="数据库的分类（了解）"><a href="#数据库的分类（了解）" class="headerlink" title="数据库的分类（了解）"></a>数据库的分类（了解）</h3><ul><li>关系型数据库：经过数学理论验证可以将现实生活中的各种关系保存到数据库，这种就称为关系型数据库。保存数据以表为单位</li><li>非关系数据库：一般都是为了解决某些特定场景的问题比如：缓存，高并发访问，Redis数据库（以key-value形式保存数据）<h4 id="常见的关系型数据"><a href="#常见的关系型数据" class="headerlink" title="常见的关系型数据"></a>常见的关系型数据</h4></li><li>MySQL: 属于Oracle公司的产品，08被Sun公司收购，09年Sun公司被Oracle收购，开源免费，被收购后发布5.5版本使用Oracle的部分技术，性能提高了30%以上，用户量增多，计划把MySQL闭源 原MySQL程序员离开Oracle创建了MariaDB 老板女儿Maria。市场排名第一</li><li>Oracle: 排名第二，闭源 性能最高 收费最贵</li><li>DB2： IBM公司产品 闭源项目</li><li>SQLServer：微软公司产品  闭源</li><li>Sqlite：轻量级数据库，安装包几十k，应用在嵌入式设备或移动设备上，</li></ul><h3 id="开源和闭源"><a href="#开源和闭源" class="headerlink" title="开源和闭源"></a>开源和闭源</h3><ul><li><p>开源：开放源代码 免费试用，通过卖服务盈利，社会上会有一些大牛程序员会无偿的维护和升级</p></li><li><p>闭源：不开放源代码 收费，通过卖产品+服务盈利 ，有大牛会攻击破坏，但是人家养了一群人维护升级</p><h3 id="打开客户端连接MySQL"><a href="#打开客户端连接MySQL" class="headerlink" title="打开客户端连接MySQL"></a>打开客户端连接MySQL</h3></li><li><p>在终端中执行： mysql -uroot -p 回车  如果有密码写密码 回车 如果没有密码则直接回车</p></li></ul><hr><h3 id="和数据库相关的SQL"><a href="#和数据库相关的SQL" class="headerlink" title="和数据库相关的SQL"></a>和数据库相关的SQL</h3><h4 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h4><ul><li>show databases;<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4></li><li>create database db1;<h4 id="查看数据库详情"><a href="#查看数据库详情" class="headerlink" title="查看数据库详情"></a>查看数据库详情</h4></li><li>show create database db1;<h4 id="创建数据库指定字符集"><a href="#创建数据库指定字符集" class="headerlink" title="创建数据库指定字符集"></a>创建数据库指定字符集</h4></li><li>create database db2 character set gbk/utf8;<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4></li><li>drop database db2;<h4 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h4></li><li>use db1;<h3 id="和表相关的SQL"><a href="#和表相关的SQL" class="headerlink" title="和表相关的SQL"></a>和表相关的SQL</h3><h4 id="查询所有表"><a href="#查询所有表" class="headerlink" title="查询所有表"></a>查询所有表</h4></li><li>show tables;<h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4></li><li>create table 表名(字段1名 字段1的类型,字段2名 字段2的类型,…..);<br>  create table person(name varchar(10),age int);</li><li>创建一个学生表（student） 保存学号id,姓名name,年龄age,语文chinese,数学math,英语english<br>   create table student(id int,name varchar(10),age int,chinese int,math int,english int);<h4 id="查看表详情"><a href="#查看表详情" class="headerlink" title="查看表详情"></a>查看表详情</h4></li><li>show create table 表名;<br>  show create table person;<h4 id="创建表时指定表的引擎和字符集"><a href="#创建表时指定表的引擎和字符集" class="headerlink" title="创建表时指定表的引擎和字符集"></a>创建表时指定表的引擎和字符集</h4></li><li>create table t1(name varchar(10)) engine=myisam charset=gbk;</li></ul><h4 id="表的引擎"><a href="#表的引擎" class="headerlink" title="表的引擎"></a>表的引擎</h4><ul><li>innodb：支持数据库的高级操作如：外键、事务等，默认引擎</li><li>myisam：只支持基础的增删改查操作</li></ul><hr><h3 id="SQL格式："><a href="#SQL格式：" class="headerlink" title="SQL格式："></a>SQL格式：</h3><ol><li>可以有换行</li><li>最后以;结尾</li><li>关键字之间需要有空格(可以写多个空格，建议写一个)</li></ol><h4 id="查看表字段"><a href="#查看表字段" class="headerlink" title="查看表字段"></a>查看表字段</h4><ul><li>desc 表名;<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4></li><li>drop table 表名;<h4 id="修改表相关"><a href="#修改表相关" class="headerlink" title="修改表相关"></a>修改表相关</h4><h5 id="修改表名——rename-table-原名-to-新名"><a href="#修改表名——rename-table-原名-to-新名" class="headerlink" title="修改表名——rename table 原名 to 新名;"></a>修改表名——rename table 原名 to 新名;</h5>  rename table student to stu;<h5 id="修改表的引擎和字符集——alter-table-表名-engine-myisam-innodb-charset-utf8-gbk"><a href="#修改表的引擎和字符集——alter-table-表名-engine-myisam-innodb-charset-utf8-gbk" class="headerlink" title="修改表的引擎和字符集——alter table 表名 engine=myisam/innodb charset=utf8/gbk;"></a>修改表的引擎和字符集——alter table 表名 engine=myisam/innodb charset=utf8/gbk;</h5>  alter table stu engine=myisam charset=gbk;<h5 id="添加表字段"><a href="#添加表字段" class="headerlink" title="添加表字段"></a>添加表字段</h5>最后面： alter table 表名 add 字段名 字段类型;<br>最前面： alter table 表名 add 字段名 字段类型 first;<br>xxx的后面: alter table 表名 add 字段名 字段类型 after xxx;<br>  create table hero(name varchar(10));<br>  alter table hero add age int;<br>  alter table hero add id int first;<br>  alter table hero add sal int after name;<h5 id="删除表字段——alter-table-表名-drop-字段名"><a href="#删除表字段——alter-table-表名-drop-字段名" class="headerlink" title="删除表字段——alter table 表名 drop 字段名;"></a>删除表字段——alter table 表名 drop 字段名;</h5>  alter table hero drop sal;<h5 id="修改表字段的名字和类型——alter-table-表名-change-原字段名-新字段名-新字段类型"><a href="#修改表字段的名字和类型——alter-table-表名-change-原字段名-新字段名-新字段类型" class="headerlink" title="修改表字段的名字和类型——alter table 表名 change 原字段名 新字段名 新字段类型;"></a>修改表字段的名字和类型——alter table 表名 change 原字段名 新字段名 新字段类型;</h5>  alter table hero change name heroname varchar(5);<h5 id="修改表字段的类型和位置——alter-table-表名-modify-字段名-类型-位置"><a href="#修改表字段的类型和位置——alter-table-表名-modify-字段名-类型-位置" class="headerlink" title="修改表字段的类型和位置——alter table 表名 modify 字段名 类型 位置;"></a>修改表字段的类型和位置——alter table 表名 modify 字段名 类型 位置;</h5>  alter table hero modify age int first(after xxx);</li></ul><hr><h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><ol><li>创建数据库newdb并使用， 里面创建员工表t_emp只有name字段 引擎为myisam 字符集为gbk<br> 1). create database newdb;<br> 2). use newdb;<br> 3). create table t_emp(name varchar(10)) engine=myisam charset=gbk;</li><li>修改表名为emp<br> 1). rename table t_emp to emp;</li><li>修改引擎为innodb 字符集为utf8<br> 1). alter table emp engine=innodb charset=utf8;</li><li>添加部门编号字段deptno 在最后面<br> 1). alter table emp add deptno int;</li><li>添加员工编号 empno在最前面<br> 1). alter table emp add empno int first;</li><li>添加salary字段在name的后面<br> 1). alter table emp add salary int after name;</li><li>修改salary字段名字为sal，把sal放在empno的后面<br> 1). alter table emp change salary sal int;<br> 2). alter table emp modify sal int after empno;</li><li>删除sal字段<br> 1).alter table emp drop sal;</li><li>删除表<br> 1).drop table emp;</li><li>删除数据库<br>1).drop database newdb;</li></ol><hr><h3 id="数据相关"><a href="#数据相关" class="headerlink" title="数据相关"></a>数据相关</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><pre><code>create table emp(id int,name varchar(10),age int,sal int);</code></pre><ul><li>全表插入数据：<ul><li>insert into emp values(1,’Tom’,18,3000);</li></ul></li><li>指定字段插入数据：<ul><li>insert into emp (name,age) values(‘Jerry’,19);</li><li>insert into emp (name) values(‘李白’);</li></ul></li><li>批量插入数据：<br>  insert into emp values(3,’刘备’,28,6000),(4,’张飞’,20,5000),(5,’关羽’,25,9000);<br>  insert into emp (name,age) values(‘悟空’,500),(‘八戒’,400),(‘沙僧’,200);<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4></li><li>查询全部数据的全部字段信息<br>  select * from emp;</li><li>查询所有员工的姓名和年龄<br>  select name,age from emp;</li><li>查询年龄在25岁以下的员工信息<br>  select * from emp where age&lt;25;</li><li>查询工资3000块钱的员工姓名、年龄、工资<br>  select name,age,sal from emp where sal=3000;<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4></li><li>修改Tom的工资为3333<br>  update emp set sal=3333 where name=’Tom’;</li><li>修改30岁以下的工资为666<br>  update emp set sal=666 where age&lt;30;</li><li>修改id等于3的名字为吕布 年龄为55 工资为20000<br>  update emp set name=’吕布’, age=55, sal=20000 where id=3;</li><li>修改工资为null的工资为800<br>  update emp set sal=800 where sal is null;<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4></li><li>删除id=1的员工<br>  delete from emp where id=1;</li><li>删除年龄在25岁以下的员工<br>  delete from emp where age&lt;25;</li><li>删除全部数据<br>  delete from emp;</li></ul><p>insert into t1 (字段名1,字段名2) values(值1,值2),(值1,值2);<br>select name,age from t1 where id&lt;5;<br>update t1 set 字段名=值, 字段名=值 where id=5;<br>delete from t1 where id&lt;3;</p><hr><h3 id="练习：-1"><a href="#练习：-1" class="headerlink" title="练习："></a>练习：</h3><ol><li>创建hero表如果存在则先删除再创建， id 姓名name 类型type 金币money</li><li>插入以下数据   1 诸葛亮 法师 18888 ， 2 孙悟空 打野 18888 ，3 小乔 法师 6888，4 黄忠 射手 8888， 5 刘备 战士 6888</li><li>修改所有18888的为28888</li><li>修改所有打野为刺客</li><li>删除价格为6888的英雄</li><li>修改孙悟空为猪八戒</li><li>删除id为1，2，3的英雄</li><li>修改所有英雄的类型为已阵亡</li><li>删除所有数据</li><li>删除表</li></ol><hr><h3 id="中文字符问题"><a href="#中文字符问题" class="headerlink" title="中文字符问题"></a>中文字符问题</h3><ul><li>set names gbk;</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
